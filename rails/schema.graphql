"""
Active Record Interface
"""
interface ActiveRecordInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated input type of AddCoins
"""
input AddCoinsInput {
  amount: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of AddCoins
"""
type AddCoinsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  transaction: Transaction!
}

"""
Autogenerated input type of ConsumeCoins
"""
input ConsumeCoinsInput {
  amount: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of ConsumeCoins
"""
type ConsumeCoinsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  transaction: Transaction!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Mutation {
  addCoins(
    """
    Parameters for AddCoins
    """
    input: AddCoinsInput!
  ): AddCoinsPayload
  consumeCoins(
    """
    Parameters for ConsumeCoins
    """
    input: ConsumeCoinsInput!
  ): ConsumeCoinsPayload
  sendCoins(
    """
    Parameters for SendCoins
    """
    input: SendCoinsInput!
  ): SendCoinsPayload
  signup(
    """
    Parameters for Signup
    """
    input: SignupInput!
  ): SignupPayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  """
  query transactions
  """
  transactionsByUser(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    userId: ID!
  ): TransactionConnection!

  """
  find user
  """
  user(userId: ID!): User!
}

"""
Autogenerated input type of SendCoins
"""
input SendCoinsInput {
  amount: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  receiverId: ID!
  senderId: ID!
}

"""
Autogenerated return type of SendCoins
"""
type SendCoinsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  transaction: Transaction!
}

"""
Autogenerated input type of Signup
"""
input SignupInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
}

"""
Autogenerated return type of Signup
"""
type SignupPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User!
}

type Transaction implements ActiveRecordInterface {
  amount: Int!
  createdAt: ISO8601DateTime!
  id: ID!
  receiver: User
  sender: User
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Transaction.
"""
type TransactionConnection {
  """
  A list of edges.
  """
  edges: [TransactionEdge]

  """
  A list of nodes.
  """
  nodes: [Transaction]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TransactionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Transaction
}

type User implements ActiveRecordInterface {
  balance: Int!
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
}